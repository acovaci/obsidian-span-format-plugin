/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => SpanFormatPlugin2
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/editor.ts
var import_state = require("@codemirror/state");
var import_view = require("@codemirror/view");
var SpanFormatPlugin = class {
  constructor(view) {
    this.decorations = this.buildDecorations(view);
  }
  update(update) {
    if (update.docChanged || update.viewportChanged) {
      this.decorations = this.buildDecorations(update.view);
    }
  }
  destroy() {
  }
  buildDecorations(view) {
    const builder = new import_state.RangeSetBuilder();
    const spanFormatRegex = /\{\{\s*(.+?)\s*\|(.*?)\}\}/g;
    for (let { from, to } of view.visibleRanges) {
      const text = view.state.doc.sliceString(from, to);
      let match;
      while ((match = spanFormatRegex.exec(text)) !== null) {
        console.log(`Tag: ${match[1]}, Value: ${match[2]}`);
        const startPos = from + match.index;
        const endPos = startPos + match[0].length;
        builder.add(
          startPos,
          endPos,
          import_view.Decoration.mark({
            class: `span-format span-format-editing span-format--${match[1]}`
          })
        );
        builder.add(
          startPos,
          startPos + 2,
          import_view.Decoration.mark({
            class: `span-format-delimiter span-format-delimiter-start`
          })
        );
        const classStartPos = startPos + 2;
        const classEndPos = classStartPos + match[1].length;
        const valueStartPos = classEndPos + 1;
        const valueEndPos = valueStartPos + match[2].length;
        builder.add(
          classStartPos,
          classEndPos,
          import_view.Decoration.mark({
            class: `span-format-class`
          })
        );
        builder.add(
          classEndPos,
          valueStartPos,
          import_view.Decoration.mark({
            class: `span-format-delimiter span-format-delimiter-class`
          })
        );
        builder.add(
          valueStartPos,
          valueEndPos,
          import_view.Decoration.mark({
            class: `span-format-value`
          })
        );
        builder.add(
          endPos - 2,
          endPos,
          import_view.Decoration.mark({
            class: `span-format-delimiter span-format-delimiter-end`
          })
        );
      }
    }
    return builder.finish();
  }
};
var pluginSpec = {
  decorations: (value) => value.decorations
};
var spanFormatPlugin = [import_view.ViewPlugin.fromClass(
  SpanFormatPlugin,
  pluginSpec
)];

// src/main.ts
var SpanFormatPlugin2 = class extends import_obsidian.Plugin {
  async onload() {
    this.registerEditorExtension(spanFormatPlugin);
    this.registerMarkdownPostProcessor((element, context) => {
      const paragraphs = element.findAll("p");
      for (let p of paragraphs) {
        const text = p.innerText.trim();
        const spanFormatRegex = /\{\{\s*(.+?)\s*\|(.*?)\}\}/g;
        let match;
        while ((match = spanFormatRegex.exec(text)) !== null) {
          console.log(`Tag: ${match[1]}, Value: ${match[2]}`);
          const startPos = match.index;
          const endPos = startPos + match[0].length;
          const spanFormatEl = p.createSpan({
            text: match[2]
          });
          spanFormatEl.addClasses(["span-format", "span-format-display", `span-format--${match[1]}`]);
          const before = text.slice(0, startPos);
          const after = text.slice(endPos);
          p.innerHTML = `${before}${spanFormatEl.outerHTML}${after}`;
        }
      }
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,
